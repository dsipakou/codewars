from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        islands = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == "1":
                    print("visit")
                    islands += 1
                    self.visit_island(grid, i, j)
                    
                else:
                    continue
        return islands
                    
    def visit_island(self, grid, i, j):
        queue = [[i, j]]
        grid[i][j] = True
        while len(queue) > 0:
            cur_i, cur_j = queue.pop(0)
            grid[cur_i][cur_j] = True
            if cur_i > 0 and grid[cur_i - 1][cur_j] == "1":
                grid[cur_i - 1][cur_j] = True
                queue.append([cur_i - 1, cur_j])
            if cur_i < len(grid) - 1 and grid[cur_i + 1][cur_j] == "1":
                grid[cur_i + 1][cur_j] = True
                queue.append([cur_i + 1, cur_j])
            if cur_j > 0 and grid[cur_i][cur_j - 1] == "1":
                grid[cur_i][cur_j - 1] = True
                queue.append([cur_i, cur_j - 1])
            if cur_j < len(grid[0]) - 1 and grid[cur_i][cur_j + 1] == "1":
                grid[cur_i][cur_j + 1] = True
                queue.append([cur_i, cur_j + 1])

s = Solution()
grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
s.numIslands(grid)